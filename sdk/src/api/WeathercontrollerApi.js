/**
 * 彩虹共享雨金箍棒api
 * Android、iOS操作类
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SimpleResponse', 'model/SingleResponseOfAPIScenicBo', 'model/ListResponseOfAPIDicAreaBo', 'model/ListResponseOfAPIScenicBo', 'model/SingleResponseOfAPICurrencyAreaBo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SimpleResponse'), require('../model/SingleResponseOfAPIScenicBo'), require('../model/ListResponseOfAPIDicAreaBo'), require('../model/ListResponseOfAPIScenicBo'), require('../model/SingleResponseOfAPICurrencyAreaBo'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.WeathercontrollerApi = factory(root.Api.ApiClient, root.Api.SimpleResponse, root.Api.SingleResponseOfAPIScenicBo, root.Api.ListResponseOfAPIDicAreaBo, root.Api.ListResponseOfAPIScenicBo, root.Api.SingleResponseOfAPICurrencyAreaBo);
  }
}(this, function(ApiClient, SimpleResponse, SingleResponseOfAPIScenicBo, ListResponseOfAPIDicAreaBo, ListResponseOfAPIScenicBo, SingleResponseOfAPICurrencyAreaBo) {
  'use strict';

  /**
   * Weathercontroller service.
   * @module api/WeathercontrollerApi
   * @version 1.0
   */

  /**
   * Constructs a new WeathercontrollerApi. 
   * @alias module:api/WeathercontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addShareTimesUsingPOST operation.
     * @callback module:api/WeathercontrollerApi~addShareTimesUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 增加景区天气分享次数
     * 增加景区天气分享次数
     * @param {Integer} id 景区id
     * @param {module:api/WeathercontrollerApi~addShareTimesUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.addShareTimesUsingPOST = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling addShareTimesUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/weather/addShareTimes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByLocationUsingGET operation.
     * @callback module:api/WeathercontrollerApi~findByLocationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPIScenicBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 根据经纬度查询景区,不传经纬度时默认查询泰安景区
     * @param {Object} opts Optional parameters
     * @param {Number} opts.x 经度
     * @param {Number} opts.y 纬度
     * @param {String} opts.pointType 坐标系类型,默认百度,百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标
     * @param {module:api/WeathercontrollerApi~findByLocationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPIScenicBo}
     */
    this.findByLocationUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'x': opts['x'],
        'y': opts['y'],
        'pointType': opts['pointType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPIScenicBo;

      return this.apiClient.callApi(
        '/api/weather/findByLocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findCityUsingGET operation.
     * @callback module:api/WeathercontrollerApi~findCityUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfAPIDicAreaBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 根据省份查询城市
     * @param {String} code 省份编码
     * @param {module:api/WeathercontrollerApi~findCityUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfAPIDicAreaBo}
     */
    this.findCityUsingGET = function(code, callback) {
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code == undefined || code == null) {
        throw "Missing the required parameter 'code' when calling findCityUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'code': code
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfAPIDicAreaBo;

      return this.apiClient.callApi(
        '/api/weather/findCity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findDetailUsingGET operation.
     * @callback module:api/WeathercontrollerApi~findDetailUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPIScenicBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 查询详情
     * @param {Integer} scenicId 景区id
     * @param {module:api/WeathercontrollerApi~findDetailUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPIScenicBo}
     */
    this.findDetailUsingGET = function(scenicId, callback) {
      var postBody = null;

      // verify the required parameter 'scenicId' is set
      if (scenicId == undefined || scenicId == null) {
        throw "Missing the required parameter 'scenicId' when calling findDetailUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'scenicId': scenicId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPIScenicBo;

      return this.apiClient.callApi(
        '/api/weather/findDetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findProvinceUsingGET operation.
     * @callback module:api/WeathercontrollerApi~findProvinceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfAPIDicAreaBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 查询所有省份
     * @param {module:api/WeathercontrollerApi~findProvinceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfAPIDicAreaBo}
     */
    this.findProvinceUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfAPIDicAreaBo;

      return this.apiClient.callApi(
        '/api/weather/findProvince', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findScenicUsingGET operation.
     * @callback module:api/WeathercontrollerApi~findScenicUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfAPIScenicBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 查询景区
     * @param {Object} opts Optional parameters
     * @param {String} opts.code 地区编码
     * @param {String} opts.scenicName 景区名称
     * @param {Integer} opts.resultNum 结果集个数
     * @param {module:api/WeathercontrollerApi~findScenicUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfAPIScenicBo}
     */
    this.findScenicUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'code': opts['code'],
        'scenicName': opts['scenicName'],
        'resultNum': opts['resultNum']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfAPIScenicBo;

      return this.apiClient.callApi(
        '/api/weather/findScenic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryCurrentProviceUsingGET operation.
     * @callback module:api/WeathercontrollerApi~queryCurrentProviceUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPICurrencyAreaBo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 根据经纬度，查询用户所在的省份
     * @param {Number} x 经度
     * @param {Number} y 纬度
     * @param {Object} opts Optional parameters
     * @param {String} opts.pointType 坐标系类型,默认百度,百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标
     * @param {module:api/WeathercontrollerApi~queryCurrentProviceUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPICurrencyAreaBo}
     */
    this.queryCurrentProviceUsingGET = function(x, y, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'x' is set
      if (x == undefined || x == null) {
        throw "Missing the required parameter 'x' when calling queryCurrentProviceUsingGET";
      }

      // verify the required parameter 'y' is set
      if (y == undefined || y == null) {
        throw "Missing the required parameter 'y' when calling queryCurrentProviceUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'x': x,
        'y': y,
        'pointType': opts['pointType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPICurrencyAreaBo;

      return this.apiClient.callApi(
        '/api/weather/queryCurrentProvice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
