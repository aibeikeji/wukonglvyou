/**
 * 彩虹共享雨金箍棒api
 * Android、iOS操作类
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SingleResponseOfAPIRepairerBO', 'model/SimpleResponse', 'model/PageResponseOfAPIMachineDistributeBO', 'model/PageResponseOfAPIUmMachineBO', 'model/PageResponseOfAPIAgentReturnUmbrellaBO', 'model/PageResponseOfAPIUmbrellaDistributeBO', 'model/PageResponseOfAPIUmbrellaBO', 'model/SingleResponseOfAPIAgentReturnUmbrellaBO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SingleResponseOfAPIRepairerBO'), require('../model/SimpleResponse'), require('../model/PageResponseOfAPIMachineDistributeBO'), require('../model/PageResponseOfAPIUmMachineBO'), require('../model/PageResponseOfAPIAgentReturnUmbrellaBO'), require('../model/PageResponseOfAPIUmbrellaDistributeBO'), require('../model/PageResponseOfAPIUmbrellaBO'), require('../model/SingleResponseOfAPIAgentReturnUmbrellaBO'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.RepairercontrollerApi = factory(root.Api.ApiClient, root.Api.SingleResponseOfAPIRepairerBO, root.Api.SimpleResponse, root.Api.PageResponseOfAPIMachineDistributeBO, root.Api.PageResponseOfAPIUmMachineBO, root.Api.PageResponseOfAPIAgentReturnUmbrellaBO, root.Api.PageResponseOfAPIUmbrellaDistributeBO, root.Api.PageResponseOfAPIUmbrellaBO, root.Api.SingleResponseOfAPIAgentReturnUmbrellaBO);
  }
}(this, function(ApiClient, SingleResponseOfAPIRepairerBO, SimpleResponse, PageResponseOfAPIMachineDistributeBO, PageResponseOfAPIUmMachineBO, PageResponseOfAPIAgentReturnUmbrellaBO, PageResponseOfAPIUmbrellaDistributeBO, PageResponseOfAPIUmbrellaBO, SingleResponseOfAPIAgentReturnUmbrellaBO) {
  'use strict';

  /**
   * Repairercontroller service.
   * @module api/RepairercontrollerApi
   * @version 1.0
   */

  /**
   * Constructs a new RepairercontrollerApi. 
   * @alias module:api/RepairercontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the detailUsingGET operation.
     * @callback module:api/RepairercontrollerApi~detailUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPIRepairerBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 维保用户信息
     * 获取维保用户信息详情
     * @param {module:api/RepairercontrollerApi~detailUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPIRepairerBO}
     */
    this.detailUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPIRepairerBO;

      return this.apiClient.callApi(
        '/api/repairer/detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the distributeMachineUsingPOST operation.
     * @callback module:api/RepairercontrollerApi~distributeMachineUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投放棒机
     * @param {String} machineCode 棒机编码
     * @param {Number} lon 经度
     * @param {Number} lat 纬度
     * @param {String} locationAddress 经纬度转换地址
     * @param {String} locationDesc 驿站详细地址
     * @param {Object} opts Optional parameters
     * @param {String} opts.pointType 坐标系类型,默认百度,百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具
     * @param {module:api/RepairercontrollerApi~distributeMachineUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.distributeMachineUsingPOST = function(machineCode, lon, lat, locationAddress, locationDesc, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'machineCode' is set
      if (machineCode == undefined || machineCode == null) {
        throw "Missing the required parameter 'machineCode' when calling distributeMachineUsingPOST";
      }

      // verify the required parameter 'lon' is set
      if (lon == undefined || lon == null) {
        throw "Missing the required parameter 'lon' when calling distributeMachineUsingPOST";
      }

      // verify the required parameter 'lat' is set
      if (lat == undefined || lat == null) {
        throw "Missing the required parameter 'lat' when calling distributeMachineUsingPOST";
      }

      // verify the required parameter 'locationAddress' is set
      if (locationAddress == undefined || locationAddress == null) {
        throw "Missing the required parameter 'locationAddress' when calling distributeMachineUsingPOST";
      }

      // verify the required parameter 'locationDesc' is set
      if (locationDesc == undefined || locationDesc == null) {
        throw "Missing the required parameter 'locationDesc' when calling distributeMachineUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'machineCode': machineCode,
        'lon': lon,
        'lat': lat,
        'locationAddress': locationAddress,
        'locationDesc': locationDesc,
        'pointType': opts['pointType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/repairer/distribute_machine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findMachineDistributeListUsingGET operation.
     * @callback module:api/RepairercontrollerApi~findMachineDistributeListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfAPIMachineDistributeBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 棒机投放记录,createTime 降序排列
     * @param {Object} opts Optional parameters
     * @param {String} opts.machineCode 棒机编码
     * @param {Integer} opts.ltTime 时间的排序
     * @param {Integer} opts.beginTime 开始时间
     * @param {Integer} opts.endTime 结束时间
     * @param {module:api/RepairercontrollerApi~findMachineDistributeListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfAPIMachineDistributeBO}
     */
    this.findMachineDistributeListUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'machineCode': opts['machineCode'],
        'ltTime': opts['ltTime'],
        'beginTime': opts['beginTime'],
        'endTime': opts['endTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfAPIMachineDistributeBO;

      return this.apiClient.callApi(
        '/api/repairer/machine_distribute_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findMachineListUsingGET operation.
     * @callback module:api/RepairercontrollerApi~findMachineListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfAPIUmMachineBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 维保人机器列表,lastLocationTime 降序排列
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.ltTime 时间的排序
     * @param {module:api/RepairercontrollerApi~findMachineListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfAPIUmMachineBO}
     */
    this.findMachineListUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ltTime': opts['ltTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfAPIUmMachineBO;

      return this.apiClient.callApi(
        '/api/repairer/machine_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findReceiveUmbrellaListUsingGET operation.
     * @callback module:api/RepairercontrollerApi~findReceiveUmbrellaListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfAPIAgentReturnUmbrellaBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 收金箍棒记录,createTime 降序排列
     * @param {Object} opts Optional parameters
     * @param {String} opts.umbrellaCode 金箍棒编码
     * @param {Integer} opts.beginTime 开始时间
     * @param {Integer} opts.endTime 结束时间
     * @param {Integer} opts.ltTime 时间的排序
     * @param {module:api/RepairercontrollerApi~findReceiveUmbrellaListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfAPIAgentReturnUmbrellaBO}
     */
    this.findReceiveUmbrellaListUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'umbrellaCode': opts['umbrellaCode'],
        'beginTime': opts['beginTime'],
        'endTime': opts['endTime'],
        'ltTime': opts['ltTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfAPIAgentReturnUmbrellaBO;

      return this.apiClient.callApi(
        '/api/repairer/receive_umbrella_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUmbrellaDistributeUsingGET operation.
     * @callback module:api/RepairercontrollerApi~findUmbrellaDistributeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfAPIUmbrellaDistributeBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 维保人员派送金箍棒记录,createTime 降序排列
     * @param {Object} opts Optional parameters
     * @param {String} opts.umbrellaCode 金箍棒编码
     * @param {Integer} opts.ltTime 时间的排序
     * @param {Integer} opts.beginTime 开始时间
     * @param {Integer} opts.endTime 结束时间
     * @param {module:api/RepairercontrollerApi~findUmbrellaDistributeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfAPIUmbrellaDistributeBO}
     */
    this.findUmbrellaDistributeUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'umbrellaCode': opts['umbrellaCode'],
        'ltTime': opts['ltTime'],
        'beginTime': opts['beginTime'],
        'endTime': opts['endTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfAPIUmbrellaDistributeBO;

      return this.apiClient.callApi(
        '/api/repairer/umbrella_distribute_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findUmbrellaListUsingGET operation.
     * @callback module:api/RepairercontrollerApi~findUmbrellaListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfAPIUmbrellaBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 维保人员金箍棒列表,lastLocationTime 降序排列
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.ltTime 时间的排序
     * @param {module:api/RepairercontrollerApi~findUmbrellaListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfAPIUmbrellaBO}
     */
    this.findUmbrellaListUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ltTime': opts['ltTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfAPIUmbrellaBO;

      return this.apiClient.callApi(
        '/api/repairer/umbrella_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the outUmbrellaUsingPOST operation.
     * @callback module:api/RepairercontrollerApi~outUmbrellaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 棒机取金箍棒
     * @param {String} machineCode 棒机编码
     * @param {Integer} channel 通道
     * @param {module:api/RepairercontrollerApi~outUmbrellaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.outUmbrellaUsingPOST = function(machineCode, channel, callback) {
      var postBody = null;

      // verify the required parameter 'machineCode' is set
      if (machineCode == undefined || machineCode == null) {
        throw "Missing the required parameter 'machineCode' when calling outUmbrellaUsingPOST";
      }

      // verify the required parameter 'channel' is set
      if (channel == undefined || channel == null) {
        throw "Missing the required parameter 'channel' when calling outUmbrellaUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'machineCode': machineCode,
        'channel': channel
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/repairer/out_umbrella', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the receiveUmbrellaUsingPOST operation.
     * @callback module:api/RepairercontrollerApi~receiveUmbrellaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPIAgentReturnUmbrellaBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 代理点收金箍棒
     * @param {String} umbrellaCode 编码
     * @param {module:api/RepairercontrollerApi~receiveUmbrellaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPIAgentReturnUmbrellaBO}
     */
    this.receiveUmbrellaUsingPOST = function(umbrellaCode, callback) {
      var postBody = null;

      // verify the required parameter 'umbrellaCode' is set
      if (umbrellaCode == undefined || umbrellaCode == null) {
        throw "Missing the required parameter 'umbrellaCode' when calling receiveUmbrellaUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'umbrellaCode': umbrellaCode
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPIAgentReturnUmbrellaBO;

      return this.apiClient.callApi(
        '/api/repairer/receive_umbrella', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHeadImgUsingPOST operation.
     * @callback module:api/RepairercontrollerApi~updateHeadImgUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfAPIRepairerBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 修改用户头像
     * @param {String} headImg 图像
     * @param {module:api/RepairercontrollerApi~updateHeadImgUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfAPIRepairerBO}
     */
    this.updateHeadImgUsingPOST = function(headImg, callback) {
      var postBody = null;

      // verify the required parameter 'headImg' is set
      if (headImg == undefined || headImg == null) {
        throw "Missing the required parameter 'headImg' when calling updateHeadImgUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'headImg': headImg
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfAPIRepairerBO;

      return this.apiClient.callApi(
        '/api/repairer/update_head_img', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadPointUsingPOST operation.
     * @callback module:api/RepairercontrollerApi~uploadPointUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 上报位置
     * @param {Number} x 经度
     * @param {Number} y 纬度
     * @param {Object} opts Optional parameters
     * @param {String} opts.pointType 坐标系类型,默认百度,百度坐标（BD09）、国测局坐标（火星坐标，GCJ02）、和WGS84坐标系之间的转换的工具
     * @param {module:api/RepairercontrollerApi~uploadPointUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.uploadPointUsingPOST = function(x, y, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'x' is set
      if (x == undefined || x == null) {
        throw "Missing the required parameter 'x' when calling uploadPointUsingPOST";
      }

      // verify the required parameter 'y' is set
      if (y == undefined || y == null) {
        throw "Missing the required parameter 'y' when calling uploadPointUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'x': x,
        'y': y,
        'pointType': opts['pointType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/repairer/upload_point', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
