/**
 * 彩虹共享雨金箍棒api
 * Android、iOS操作类
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListResponseOfRequestResult', 'model/SingleResponseOfRequestResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListResponseOfRequestResult'), require('../model/SingleResponseOfRequestResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.FileuploadcontrollerApi = factory(root.Api.ApiClient, root.Api.ListResponseOfRequestResult, root.Api.SingleResponseOfRequestResult);
  }
}(this, function(ApiClient, ListResponseOfRequestResult, SingleResponseOfRequestResult) {
  'use strict';

  /**
   * Fileuploadcontroller service.
   * @module api/FileuploadcontrollerApi
   * @version 1.0
   */

  /**
   * Constructs a new FileuploadcontrollerApi. 
   * @alias module:api/FileuploadcontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the uploadFileBatchV2UsingPOST operation.
     * @callback module:api/FileuploadcontrollerApi~uploadFileBatchV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploadFileBatchV2
     * @param {String} fileType fileType
     * @param {Array.<File>} files files
     * @param {module:api/FileuploadcontrollerApi~uploadFileBatchV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfRequestResult}
     */
    this.uploadFileBatchV2UsingPOST = function(fileType, files, callback) {
      var postBody = null;

      // verify the required parameter 'fileType' is set
      if (fileType == undefined || fileType == null) {
        throw "Missing the required parameter 'fileType' when calling uploadFileBatchV2UsingPOST";
      }

      // verify the required parameter 'files' is set
      if (files == undefined || files == null) {
        throw "Missing the required parameter 'files' when calling uploadFileBatchV2UsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fileType': fileType,
        'files': this.apiClient.buildCollectionParam(files, 'multi')
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfRequestResult;

      return this.apiClient.callApi(
        '/api/fs/upload_batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileUsingPOST operation.
     * @callback module:api/FileuploadcontrollerApi~uploadFileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploadFile
     * @param {String} fileType fileType
     * @param {File} file file
     * @param {module:api/FileuploadcontrollerApi~uploadFileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.uploadFileUsingPOST = function(fileType, file, callback) {
      var postBody = null;

      // verify the required parameter 'fileType' is set
      if (fileType == undefined || fileType == null) {
        throw "Missing the required parameter 'fileType' when calling uploadFileUsingPOST";
      }

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw "Missing the required parameter 'file' when calling uploadFileUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fileType': fileType,
        'file': file
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/fs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileV2UsingPOST operation.
     * @callback module:api/FileuploadcontrollerApi~uploadFileV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploadFileV2
     * @param {String} fileType fileType
     * @param {File} file file
     * @param {module:api/FileuploadcontrollerApi~uploadFileV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfRequestResult}
     */
    this.uploadFileV2UsingPOST = function(fileType, file, callback) {
      var postBody = null;

      // verify the required parameter 'fileType' is set
      if (fileType == undefined || fileType == null) {
        throw "Missing the required parameter 'fileType' when calling uploadFileV2UsingPOST";
      }

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw "Missing the required parameter 'file' when calling uploadFileV2UsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'fileType': fileType,
        'file': file
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfRequestResult;

      return this.apiClient.callApi(
        '/api/fs/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadWebFileUsingPOST operation.
     * @callback module:api/FileuploadcontrollerApi~uploadWebFileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * uploadWebFile
     * @param {module:api/FileuploadcontrollerApi~uploadWebFileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfRequestResult}
     */
    this.uploadWebFileUsingPOST = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfRequestResult;

      return this.apiClient.callApi(
        '/api/fs/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
