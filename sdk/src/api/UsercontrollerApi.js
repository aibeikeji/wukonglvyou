/**
 * 彩虹共享雨金箍棒api
 * Android、iOS操作类
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SimpleResponse', 'model/SingleResponseOfThirdPartyBoundModileBO', 'model/PageResponseOfUserDepositLogBO', 'model/FeedbackVO', 'model/ListResponseOfFeedbackTypeBO', 'model/PageResponseOfUserCouponBO', 'model/SingleResponseOfdouble', 'model/SingleResponseOfMemberBO', 'model/SingleResponseOfstring', 'model/SingleResponseOfboolean', 'model/SingleResponseOfPayDetailsBO', 'model/SingleResponseOfUserGuideBO', 'model/ListResponseOfUserGuideBO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SimpleResponse'), require('../model/SingleResponseOfThirdPartyBoundModileBO'), require('../model/PageResponseOfUserDepositLogBO'), require('../model/FeedbackVO'), require('../model/ListResponseOfFeedbackTypeBO'), require('../model/PageResponseOfUserCouponBO'), require('../model/SingleResponseOfdouble'), require('../model/SingleResponseOfMemberBO'), require('../model/SingleResponseOfstring'), require('../model/SingleResponseOfboolean'), require('../model/SingleResponseOfPayDetailsBO'), require('../model/SingleResponseOfUserGuideBO'), require('../model/ListResponseOfUserGuideBO'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.UsercontrollerApi = factory(root.Api.ApiClient, root.Api.SimpleResponse, root.Api.SingleResponseOfThirdPartyBoundModileBO, root.Api.PageResponseOfUserDepositLogBO, root.Api.FeedbackVO, root.Api.ListResponseOfFeedbackTypeBO, root.Api.PageResponseOfUserCouponBO, root.Api.SingleResponseOfdouble, root.Api.SingleResponseOfMemberBO, root.Api.SingleResponseOfstring, root.Api.SingleResponseOfboolean, root.Api.SingleResponseOfPayDetailsBO, root.Api.SingleResponseOfUserGuideBO, root.Api.ListResponseOfUserGuideBO);
  }
}(this, function(ApiClient, SimpleResponse, SingleResponseOfThirdPartyBoundModileBO, PageResponseOfUserDepositLogBO, FeedbackVO, ListResponseOfFeedbackTypeBO, PageResponseOfUserCouponBO, SingleResponseOfdouble, SingleResponseOfMemberBO, SingleResponseOfstring, SingleResponseOfboolean, SingleResponseOfPayDetailsBO, SingleResponseOfUserGuideBO, ListResponseOfUserGuideBO) {
  'use strict';

  /**
   * Usercontroller service.
   * @module api/UsercontrollerApi
   * @version 1.0
   */

  /**
   * Constructs a new UsercontrollerApi. 
   * @alias module:api/UsercontrollerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authorizationByMayiUsingGET operation.
     * @callback module:api/UsercontrollerApi~authorizationByMayiUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 支付宝小程序芝麻认证
     * 支付宝小程序芝麻认证
     * @param {String} authCode 授权dode
     * @param {module:api/UsercontrollerApi~authorizationByMayiUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.authorizationByMayiUsingGET = function(authCode, callback) {
      var postBody = null;

      // verify the required parameter 'authCode' is set
      if (authCode == undefined || authCode == null) {
        throw "Missing the required parameter 'authCode' when calling authorizationByMayiUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'auth_code': authCode
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/authorizationo_by_zfb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boundInviteCodeUsingPOST operation.
     * @callback module:api/UsercontrollerApi~boundInviteCodeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 绑定邀请码
     * @param {String} inviteCode 邀请码
     * @param {module:api/UsercontrollerApi~boundInviteCodeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.boundInviteCodeUsingPOST = function(inviteCode, callback) {
      var postBody = null;

      // verify the required parameter 'inviteCode' is set
      if (inviteCode == undefined || inviteCode == null) {
        throw "Missing the required parameter 'inviteCode' when calling boundInviteCodeUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'inviteCode': inviteCode
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/bound_invite_code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boundModileUsingPOST operation.
     * @callback module:api/UsercontrollerApi~boundModileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfThirdPartyBoundModileBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 用户绑定手机号
     * 用户绑定手机号
     * @param {String} mobile 手机号码
     * @param {String} idcode 短信验证码
     * @param {module:api/UsercontrollerApi~boundModileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfThirdPartyBoundModileBO}
     */
    this.boundModileUsingPOST = function(mobile, idcode, callback) {
      var postBody = null;

      // verify the required parameter 'mobile' is set
      if (mobile == undefined || mobile == null) {
        throw "Missing the required parameter 'mobile' when calling boundModileUsingPOST";
      }

      // verify the required parameter 'idcode' is set
      if (idcode == undefined || idcode == null) {
        throw "Missing the required parameter 'idcode' when calling boundModileUsingPOST";
      }


      var pathParams = {
      };
      var queryParams = {
        'mobile': mobile,
        'idcode': idcode
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfThirdPartyBoundModileBO;

      return this.apiClient.callApi(
        '/api/bound_mobile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the boundModileVerifycodeUsingGET operation.
     * @callback module:api/UsercontrollerApi~boundModileVerifycodeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 绑定手机发送短信验证码
     * 绑定手机发送短信验证码.&lt;br/&gt; App级别
     * @param {String} phoneNumber 手机号码
     * @param {module:api/UsercontrollerApi~boundModileVerifycodeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.boundModileVerifycodeUsingGET = function(phoneNumber, callback) {
      var postBody = null;

      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == undefined || phoneNumber == null) {
        throw "Missing the required parameter 'phoneNumber' when calling boundModileVerifycodeUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'phone_number': phoneNumber
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-clientcredentials'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/bound_modile_verifycode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the depositLogUsingGET operation.
     * @callback module:api/UsercontrollerApi~depositLogUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfUserDepositLogBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取押金记录
     * 押金记录列表,使用createTime 降序排列&lt;br/&gt;
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.ltTime createTime小于该时间的数据
     * @param {module:api/UsercontrollerApi~depositLogUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfUserDepositLogBO}
     */
    this.depositLogUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ltTime': opts['ltTime']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfUserDepositLogBO;

      return this.apiClient.callApi(
        '/api/depositLog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackUsingPOST operation.
     * @callback module:api/UsercontrollerApi~feedbackUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 问题反馈
     * @param {Object} opts Optional parameters
     * @param {module:model/FeedbackVO} opts.vo vo
     * @param {module:api/UsercontrollerApi~feedbackUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.feedbackUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['vo'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFeedbackTypeListUsingGET operation.
     * @callback module:api/UsercontrollerApi~findFeedbackTypeListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfFeedbackTypeBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 问题反馈类型列表
     * @param {String} type 反馈类型分类，1 一般问题 2 行程中 3 已完成用户
     * @param {module:api/UsercontrollerApi~findFeedbackTypeListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfFeedbackTypeBO}
     */
    this.findFeedbackTypeListUsingGET = function(type, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling findFeedbackTypeListUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfFeedbackTypeBO;

      return this.apiClient.callApi(
        '/api/feedback_type_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTripListUsingPOST operation.
     * @callback module:api/UsercontrollerApi~findTripListUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseOfUserCouponBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 我的优惠券
     * @param {module:api/UsercontrollerApi~findTripListUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseOfUserCouponBO}
     */
    this.findTripListUsingPOST = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResponseOfUserCouponBO;

      return this.apiClient.callApi(
        '/api/listCoupon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepositUsingGET operation.
     * @callback module:api/UsercontrollerApi~getDepositUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfdouble} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取需要交的押金数额)
     * @param {module:api/UsercontrollerApi~getDepositUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfdouble}
     */
    this.getDepositUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfdouble;

      return this.apiClient.callApi(
        '/api/get_deposit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyProfileUsingGET operation.
     * @callback module:api/UsercontrollerApi~getMyProfileUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfMemberBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取本人信息
     * 获取指定id的信息.&lt;br/&gt; 用户级别
     * @param {module:api/UsercontrollerApi~getMyProfileUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfMemberBO}
     */
    this.getMyProfileUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfMemberBO;

      return this.apiClient.callApi(
        '/api/userprofile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZhimaOauthUrlUsingGET operation.
     * @callback module:api/UsercontrollerApi~getZhimaOauthUrlUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 获取支付宝授权url
     * 获取支付宝授权url
     * @param {String} interfaceName 接口名称
     * @param {module:api/UsercontrollerApi~getZhimaOauthUrlUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfstring}
     */
    this.getZhimaOauthUrlUsingGET = function(interfaceName, callback) {
      var postBody = null;

      // verify the required parameter 'interfaceName' is set
      if (interfaceName == undefined || interfaceName == null) {
        throw "Missing the required parameter 'interfaceName' when calling getZhimaOauthUrlUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'interfaceName': interfaceName
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfstring;

      return this.apiClient.callApi(
        '/api/get_zhima_oauth_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutUsingGET operation.
     * @callback module:api/UsercontrollerApi~logoutUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfboolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 用户注销
     * 注销用户.&lt;br/&gt; 用户级别
     * @param {module:api/UsercontrollerApi~logoutUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfboolean}
     */
    this.logoutUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfboolean;

      return this.apiClient.callApi(
        '/api/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserHeadUsingGET operation.
     * @callback module:api/UsercontrollerApi~modifyUserHeadUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 客户端修改头像
     * @param {String} headImgUrl 头像
     * @param {module:api/UsercontrollerApi~modifyUserHeadUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.modifyUserHeadUsingGET = function(headImgUrl, callback) {
      var postBody = null;

      // verify the required parameter 'headImgUrl' is set
      if (headImgUrl == undefined || headImgUrl == null) {
        throw "Missing the required parameter 'headImgUrl' when calling modifyUserHeadUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'headImgUrl': headImgUrl
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/modify_user_head', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserNicknameUsingGET operation.
     * @callback module:api/UsercontrollerApi~modifyUserNicknameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 客户端修改昵称
     * @param {String} nickname 昵称
     * @param {module:api/UsercontrollerApi~modifyUserNicknameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.modifyUserNicknameUsingGET = function(nickname, callback) {
      var postBody = null;

      // verify the required parameter 'nickname' is set
      if (nickname == undefined || nickname == null) {
        throw "Missing the required parameter 'nickname' when calling modifyUserNicknameUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'nickname': nickname
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/modify_user_nickname', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymetUsingPOST operation.
     * @callback module:api/UsercontrollerApi~paymetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfPayDetailsBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 充押金
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMark 支付方式  alipay_app,wx_app
     * @param {module:api/UsercontrollerApi~paymetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfPayDetailsBO}
     */
    this.paymetUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'paymentMark': opts['paymentMark']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfPayDetailsBO;

      return this.apiClient.callApi(
        '/api/paymet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryAlipayAppIdUsingGET operation.
     * @callback module:api/UsercontrollerApi~queryAlipayAppIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 查询支付宝的 appId
     * 查询支付宝的 appId
     * @param {module:api/UsercontrollerApi~queryAlipayAppIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfstring}
     */
    this.queryAlipayAppIdUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfstring;

      return this.apiClient.callApi(
        '/api/query_alipay_appid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryInviteAmountUsingGET operation.
     * @callback module:api/UsercontrollerApi~queryInviteAmountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfdouble} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 查询邀请好友优惠券金额
     * 查询邀请好友优惠券金额
     * @param {module:api/UsercontrollerApi~queryInviteAmountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfdouble}
     */
    this.queryInviteAmountUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfdouble;

      return this.apiClient.callApi(
        '/api/query_invite_amount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the realnameUsingGET operation.
     * @callback module:api/UsercontrollerApi~realnameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 实名认证
     * @param {String} name 姓名
     * @param {String} idcard 身份证
     * @param {module:api/UsercontrollerApi~realnameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.realnameUsingGET = function(name, idcard, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling realnameUsingGET";
      }

      // verify the required parameter 'idcard' is set
      if (idcard == undefined || idcard == null) {
        throw "Missing the required parameter 'idcard' when calling realnameUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'idcard': idcard
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/real_name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refundDepositUsingPOST operation.
     * @callback module:api/UsercontrollerApi~refundDepositUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 退押金
     * @param {module:api/UsercontrollerApi~refundDepositUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.refundDepositUsingPOST = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/refundDeposit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUserInfoUsingGET operation.
     * @callback module:api/UsercontrollerApi~saveUserInfoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 微信小程序上传昵称和头像
     * @param {String} nickname 昵称
     * @param {String} headImgUrl 头像
     * @param {module:api/UsercontrollerApi~saveUserInfoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResponse}
     */
    this.saveUserInfoUsingGET = function(nickname, headImgUrl, callback) {
      var postBody = null;

      // verify the required parameter 'nickname' is set
      if (nickname == undefined || nickname == null) {
        throw "Missing the required parameter 'nickname' when calling saveUserInfoUsingGET";
      }

      // verify the required parameter 'headImgUrl' is set
      if (headImgUrl == undefined || headImgUrl == null) {
        throw "Missing the required parameter 'headImgUrl' when calling saveUserInfoUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'nickname': nickname,
        'headImgUrl': headImgUrl
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SimpleResponse;

      return this.apiClient.callApi(
        '/api/save_user_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGuideDetailUsingGET operation.
     * @callback module:api/UsercontrollerApi~userGuideDetailUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleResponseOfUserGuideBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 文章详情(微信小程序使用)
     * @param {Integer} id 文章ID
     * @param {module:api/UsercontrollerApi~userGuideDetailUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleResponseOfUserGuideBO}
     */
    this.userGuideDetailUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling userGuideDetailUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleResponseOfUserGuideBO;

      return this.apiClient.callApi(
        '/api/guide_detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGuideListUsingGET operation.
     * @callback module:api/UsercontrollerApi~userGuideListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseOfUserGuideBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 文章列表
     * @param {Integer} type 文章类型，1.用户指南 2.设置
     * @param {module:api/UsercontrollerApi~userGuideListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseOfUserGuideBO}
     */
    this.userGuideListUsingGET = function(type, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling userGuideListUsingGET";
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2-password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListResponseOfUserGuideBO;

      return this.apiClient.callApi(
        '/api/guide_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
